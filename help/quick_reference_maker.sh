#! /bin/bash
#######################################################################
#
# this script was generated by hand; contact neubig@salk.edu for help
# 
# usage: 1) save this file to directory docs-user/ which is parallel to
#           the directory docs/ 
#           docs/ should contain help/, which should contain
#           Hines's html help files.
#
#        2) then execute:
#
#           ./index_for_help_files--break_on_alphabet_colorize_top_links.sh
#
#######################################################################
# Description
#
# this script produces an alternate index for Hines's documentation
#
# it also colorizes the standard files
#
# the number of columns in the index, as well as colors, can be set 
# via variables at the top of this file 
#
#######################################################################
# Change Log
#  
# 2005-01-14 MTN - updated for nrnhelp.zip retrieved a couple days ago
#                  from http://www.neuron.yale.edu/neuron/docs/
#                  nnhelp.zip has a file date of 2004-12-08
#
#                - was #! /bin/sh  now  #!/bin/bash
#                - added requisite two args, ncol and bColor
#                - ncol=0 is for Hines's style
#
#
# 2004-09-01 MTN - updated for help.zip files
#                - prettied up  Predec, Kschan
#                - added n-Col links
#                - added grep -v quick to correct a bug in $of in 
#                  which multiple html prologs are written to quick_*
#  
# 2004-08-30 MTN - updated for nrn 5.5 help files
#                - misc changes to comments
#                - added originalhelpdir
#                  
#
# 2004-02-02 MTN - devised this alternate approach to uppercasing
#                  txt=`echo ${txt:0:1} | tr [:lower:] [:upper:]`${txt:1}
#
#
# 2004-01-30 MTN - tried to add single quotes, as suggested by MH:
#                  cat index.html | sed 's#\<\/a\>#\<\/a\>\\n#g' > _xx1
#
#                - swapped in this line from MH to allow sed3.0
#                  cat index.html | sed s#\<\/a\>#\<\/a\>\@#g |tr '@' '\n' > _xx1 
#
#                - removed htmm from the above section: Description
#
#
# 2003-12-17 MTN - split off ./help_files-break_on_alphabet.sh
#
#                - changed from interlaced htmm files to a parallel 
#                  tree docs-user/help  with html files
#
#                - switched from single-spec'd $excludes and $renames
#                  to individual definitions for each set of top-links
#
#
# 2003-12-16 MTN - emailed link to MH
#
#                - finished this version
#
#
# To Do:
#
# - organize top links
#
#######################################################################

if [ $# -ne 2 ]
then
echo 
echo "Nothing written, must specify two arguments"
echo
echo "Usage:"
echo "   quick_reference_maker.sh  ncol  bColor"
echo 
echo "Using ncol=0 is similar to ncol=2 except that the file"
echo "      will be named quick_reference.html"
echo 
exit 1
fi

#######################################################################
# here are some easy-to-change variables
#

#SED=/home/hines/gnu/bin/sed4
SED=/bin/sed

ncol=$1                    # number of columns
bColor=$2

if [ $ncol -eq 0 ]
then
hines=1
ncol=2
of="quick_reference.html"  # output file
else
hines=0
of="quick_reference_${ncol}col.html"  # output file
fi

hf="_header.html"          #
bf="_body.html"            #
ff="_footer.html"          #
cellpadding="5"            # html table 
bgcolor="#000000"          # background color
fgcolor="#77CC77"          # foreground
 lcolor="#22FF22"          # 
vlcolor="#FF4444"          # 
alcolor="#FFFFFF"          # 

originalhelpdir="../docs/help"

letters="a b c d e f g h i j k l m n o p q r s t u v w x y z"


if [ $bColor -eq 1 ]
then
printf "\n    Colorizing html pages\n"
else
printf "\n    Not colorizing html pages\n"
fi

printf "\n    Constructing file: %s\n\n" $of

#######################################################################
# copy docs/help to docs-user/help
#Hines comment out following two lines
#cp -pr $originalhelpdir .
#cd help

#######################################################################
# prepare a-z link bar
azlinkbar="<big><big><a href=\"#top\">top</a> | "
for letter in $letters; do 
  azlinkbar=$azlinkbar"<a href=\"#$letter\">$letter</a>&nbsp;" 
  done
azlinkbar=$azlinkbar"</big></big>" 

#######################################################################
# prepare links to Hine's original help files:
origlinks="Originals: &nbsp; \
           <a href=\"index.html\">index.html</a> &nbsp;&nbsp;\
           <a href=\"hier.html\">hier.html</a>"

#######################################################################
# prepare links to column files:
quicklinks="Quicks: &nbsp; \
           <a href=\"quick_reference_1col.html\">1 Col</a> &nbsp;&nbsp;\
           <a href=\"quick_reference_2col.html\">2 Col</a> &nbsp;&nbsp;\
           <a href=\"quick_reference_3col.html\">3 Col</a> &nbsp;&nbsp;\
           <a href=\"quick_reference_4col.html\">4 Col</a> &nbsp;&nbsp;\
           <a href=\"quick_reference_5col.html\">5 Col</a> &nbsp;&nbsp;\
           "

#######################################################################
# prepare general class links
excludes="\
vect2\|\
vneur\|\
vfit"

renames="                    \
-e s#\.html##                \
-e s#vect#vector#            \
-e s#guimath#GUIMath#        \
-e s#vfe#ValueFieldEditor#   \
-e s#symchoos#SymChooser#    \
-e s#tedit#TextEditor#       \
-e s#strfun#StringFunctions# \
-e s#pwman#PWManager#        \
-e s#vbox#VBox#              \
-e s###                      \
-e s#.#\U&#"

find ./neuron/general/classes -name "*html" > _xxcl1
grep -v $excludes _xxcl1 > _xxcl2

echo "" > _xxcl3
for i in `cat _xxcl2`; do
  f=`basename $i`
  txt=`echo $f | ${SED} $renames`
###
# use the following line when sed does not allow -e s#.#\U&#
# txt=`echo ${txt:0:1}|tr [:lower:] [:upper:]`${txt:1}
###
  echo "<a href=\"$i\">$txt</a>" >> _xxcl3
  done 
sort -f -t">" -k2 _xxcl3 > _xxcl2
generalclasslinks=""
for i in `cat _xxcl2`; do
  generalclasslinks=$generalclasslinks`printf %s $i" &nbsp; &nbsp;  "`
  done 
generalclasslinks=$generalclasslinks""


#######################################################################
# prepare neuron class links
excludes="\
none-what-so-ever"

renames="\
-e s#\.html## \
-e s#cvode#CVode#      \
-e s#finithnd#FInitializeHandler#      \
-e s#linmod#LinearMechanism#      \
-e s#mechstan#MechanismStandard#      \
-e s#mechtype#MechanismType#      \
-e s#parcon#ParallelContext#      \
-e s#parnet#ParallelNetManager#      \
-e s#pltshape#PlotShape#      \
-e s#rvarplt#RangeVarPlot#      \
-e s#savstate#SaveState#      \
-e s#secbrows#SectionBrowser#      \
-e s#seclist#SectionList#      \
-e s#secref#SectionRef#      \
-e s#kschan#KSChan#     \
-e s###      \
-e s#.#\U&#"

find ./neuron/neuron/classes -name "*html" > _xxcl1
grep -v $excludes _xxcl1 > _xxcl2

echo "" > _xxcl3
for i in `cat _xxcl2`; do
  f=`basename $i`
  txt=`echo $f | ${SED} $renames`
  echo "<a href=\"$i\">$txt</a>" >> _xxcl3
  done 
sort -f -t">" -k2 _xxcl3 > _xxcl2
neuronclasslinks=""
for i in `cat _xxcl2`; do
  neuronclasslinks=$neuronclasslinks`printf %s $i" &nbsp; &nbsp;  "`
  done 
neuronclasslinks=$neuronclasslinks""


#######################################################################
# prepare group links
excludes="\
/pointman\.html\|\
/nrnoc\.html\|\
/notify\.html\|\
/oop\.html\|\
/oldgrph\.html\|\
/plt\.html\|\
/hocmech\.html\|\
/secspec\.html\|\
/runfit\.html\|\
/runctrl\.html\|\
/impedanx\.html\|\
/impratio\.html\|\
/inserter\.html\|\
/read\.html\|\
/dialog\.html\|\
/electrod\.html\|\
/family\.html\|\
/attshape\.html\|\
/celbild\.html\|\
/checkpnt\.html\|\
/0fun\.html\|\
/sscanf\.html\|\
/ocfunc\.html\|\
/ropen\.html\|\
/mcran4\.html\|\
/symbols\.html\|\
/nfunc\.html\|\
/pwmplace\.html\|\
/shapebox\.html\|\
/plot\.html\|\
/mulfit\.html\|\
agui/pltshape\.html\|\
/grapher\.html\|\
/gui\.html\|\
/project\.html\|\
/showmech\.html\|\
/system\.html" 

renames="\
-e s#\.html## \
-e s#printf#IO#      \
-e s#lw#Obsolete#      \
-e s#funfit#FunctionFitter#      \
-e s#0stdrun#StandardRunTools#      \
-e s#sin#Math#      \
-e s#ocsyntax#Syntax#      \
-e s#ockeywor#Keywords#      \
-e s#nmodl#NMODL#      \
-e s#panel#Button-Menu-Panel#      \
-e s#mech#PointProcesses#      \
-e s#predec#PreDeclareds#     \
-e s###      \
-e s#.#\U&#"

find ./neuron/*/* -name "*html" | grep -v "classes" > _xxcl1
grep -v $excludes _xxcl1 > _xxcl2

echo "" > _xxcl3
for i in `cat _xxcl2`; do
  f=`basename $i`
  txt=`echo $f | ${SED} $renames`
  echo "<a href=\"$i\">$txt</a>" >> _xxcl3
  done 
sort -f -t">" -k2 _xxcl3 > _xxcl2
grouplinks=""
for i in `cat _xxcl2`; do
  grouplinks=$grouplinks`printf %s $i" &nbsp; &nbsp;  "`
  done 
grouplinks=$grouplinks""


#######################################################################
# grab hrefs from index.html
#
# put a newline after each </a>
#cat index.html | ${SED} s#\<\/a\>#\<\/a\>\\n#g > _xx1
cat index.html | ${SED} s#\<\/a\>#\<\/a\>\@#g |tr '@' '\n' > _xx1 

# remove leading white space from each line
cat _xx1 | ${SED} -e 's#^[ ^T]*##' > _xx2

# sort
sort -f -t">" -k2 _xx2 > _xx3

# remove misc tags/text
cat _xx3 | ${SED} -e 's#<hr>##' -e 's#<pre>##' -e 's#<\/pre>##' -e 's#----.*----##' >_xx4

# remove all blank lines at top of file
cat _xx4 | ${SED} '/./,$!d' > _xx5 


#######################################################################
# write header
#
echo "<html>"                   > $hf
echo "<head>"                  >> $hf
echo "<style><!--"             >> $hf
echo "a{text-decoration:none}" >> $hf
echo "--></style>"             >> $hf
echo "</head>"                 >> $hf

if [ $bColor -eq 1 ]
then
echo "<body style=\"color: $fgcolor; background-color: $bgcolor;\" \
            link=\"$lcolor\" vlink=\"$vlcolor\" alink=\"$alcolor\">" >> $hf 
else
echo "<body>" >> $hf 
fi

echo "<a name=\"top\"></a>"  >> $hf 

echo "<table width=\"10%\" cellpadding=\"$cellpadding\"><tbody>"     >> $hf 


#######################################################################
# write toplinks
#
echo "" > $bf
bgnrow="<tr><td colspan=\"$(($ncol+1))\">"
endrow="</td></tr>"

# generate links to standard help files
echo $bgnrow "<big>$origlinks        </big>" $endrow  >> $bf 

if [ $1 -ne 0 ]
then
echo $bgnrow "<big>$quicklinks       </big>" $endrow  >> $bf 
fi

echo $bgnrow       $generalclasslinks        $endrow  >> $bf 
echo $bgnrow       $neuronclasslinks         $endrow  >> $bf 
echo $bgnrow       $grouplinks               $endrow  >> $bf 


#######################################################################
# write body
#
for letter in $letters ; do 

  # calculate number of rows per letter
  grep -i ">$letter" _xx5 > _xx7 
  n=`wc -l _xx7 | ${SED} "s#^[ ^T]*##" | cut -d" " -f1`
  nr=$((n/$ncol+1))

  # generate a-z link bar
  echo $bgnrow "<a name=\"$letter\"></a><pre>"$azlinkbar"</pre>" $endrow  >> $bf 


  echo "<tr>"    >> $bf
  printf %s "<td  style=\"vertical-align: top;\"><pre>" >> $bf 
   for i in `seq 1 $nr` 
     do printf %s $letter"<br>"  >> $bf 
   done 
  printf %s "</pre></td>"  >> $bf 

  for icol in `seq 1 $ncol`; do 
    echo "<td style=\"vertical-align: top;\"><pre>"    >> $bf 
    tail -n +$((($icol-1)*$nr+1)) _xx7 | head -n $nr >> $bf 
    echo "</pre></td>"  >> $bf 
    done 

  echo "</tr>"  >> $bf 
  done  
echo "</tbody></table>"    >> $bf 

for i in `seq 1 100`
  do printf %s "<br>" >> $bf
  done 

echo "">> $bf 


#######################################################################
# write footer
#

echo "</body>"         > $ff
echo "</html>"        >> $ff


#######################################################################
# assemble new index files
#
cat $hf $bf $ff > $of

#######################################################################
# colorize standard files
#
if [ $bColor -eq 1 ]
then
for i in `find . -name "*html" | grep -v quick`; do 
  cat $hf $i $ff > xx
  mv xx $i
done
fi

#######################################################################
# switch hrefs from pointing to .html to .htmm
#
#for i in `find . -name "*htmm"`; do 
#  cat $i | ${SED} "s#\.html#\.htmm#g" > _xx
#  mv -f _xx $i
#done


