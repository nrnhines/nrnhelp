?1 StringFunctions
@hsyn
obj = new StringFunctions()
@hdesc
The StringFunctions class contains functions which you can apply to a @{strdef@}.  This class
exists purely for the utility of preventing pollution of name space with string operations.
@hex
@code
objref strobj
strobj = new StringFunctions()
@endcode
@h

? len
@hsyn
 	length = strobj.len(@varstr)
@hdesc
Return the length of a string.
@h

? substr
@hsyn
 	index = strobj.substr(@vars1, @vars2)
@hdesc
 Return the index into @vars1 of the first occurrence of @vars2.
		If @vars2 isn't a substring then the return value is -1.
@h

? head
@hsyn
	strobj.head(@varstr, "@varregexp", @varresult)
@hdesc
The result contains the head of the string
		up to but not including the @varregexp. returns index of
		last char.
@h

? tail
@hsyn
	strobj.tail(@varstr, "@varregexp", @varresult) 
@hdesc
The result contains the tail of the string
		from the char following @varregexp to the end of the string.
		return index of first char.

	Other functions can be added as needed,
		eg., @{index(s1, c1)@}, @{char(s1, i)@}, etc.
		without polluting the global name space. In recent versions
		functions can return strings.
@h

? right
@hsyn
	strobj.right(@varstr, @varn)
@hdesc
	Removes first n characters from @varstr and puts the result in
	@varstr.
@h

? left
@hsyn
	.left(@varstr, @varn)
@hdesc
	Removes all but first n characters from @varstr and puts the
result in @varstr
@h

? is_name
@hsyn
	.is_name(@varstr)
@hdesc
	Returns 1 if the @varstr is the name of a symbol, 0 otherwise.
This is so useful that the same thing is available with the top level
@aname_declared#functions function.
@h

? alias
@hsyn
	.alias(@varobj, "name", &@varvar2)
	.alias(@varobj, "name", @varobj2)
	.alias(@varobj, "name")
	.alias(@varobj)
@hdesc
	"name" becomes a public variable for obj and points to the
scalar var2 or object obj2. obj.name may be used anywhere the var2 or obj2 may
be used. With no third arg, the "name" is removed from the objects
alias list. With no second arg, the objects alias list is cleared.
@h

? alias_list
@hsyn
list = sf.alias_list(@varobj)
@hdesc
	Return a new List object containing String objects which contain
the alias names.
@hbug
The String class is not a built-in class. It generally gets declared when
the nrngui.hoc file is loaded and lives in stdlib.hoc.
Note that the String class must exist and its
constructor must allow a single strdef argument. Minimally:
@code
begintemplate String
public s
strdef s
proc init() { s = $s1 }
endtemplate String
@endcode
@h

? references
@hsyn
sf.references(object)
@hdesc
Prints the number of references to the object and all objref names
that reference that object (including references via
HBox, VBox, and List). It also prints the number of references found.
@h

? is_point_process
@hsyn
i = sf.is_point_process(object)
@hdesc
Returns 0 if the object is not a POINT_PROCESS. Otherwise
returns the point type (which is always 1 greater than the index into the
@aMechanismType (1) list).
@h

? is_artificial
@hsyn
i = sf.is_artificial(object)
@hdesc
Returns 0 if the object is not an ARTIFICIAL_CELL. Otherwise
returns the point type (which is always 1 greater than the index into the
@aMechanismType (1)list).
@h

