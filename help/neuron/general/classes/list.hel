?p neuron.exe general classes
?1 List
List of objects
@hsyn
List()
List("@vartemplatename")
@hdesc
The List class provides useful tools for creating and manipulating lists of objects.  
For example, if you have 
a network of cells connected at synapses and each synapse is a separate object, you may want to use
lists to help organize the network.  You could create one list of all pre-synaptic connections and
another of post-synaptic connections, as well as a list of all the connecting cells.   
@dl
@dt @{List()@}
@dd Create an empty list. Objects added to the list are referenced.
	Objects removed from the list are unreferenced.
@dt @{List("@vartemplatename")@}
@dd Create a list of all the object instances of the template.
	These object instances are NOT referenced and therefore the list
	dynamically changes as objects of template instances are
	created and destroyed. Adding and  removing objects
	from this kind of list is not allowed.
@endl
@h

? append
@hsyn
  .append(@varobject)
@hdesc
Append an object to a list, and return the number of items in list.
@h

? prepend
@hsyn
 .prepend(@varobject)
@hdesc
Add an object to the beginning of a list, and return the number of objects in the list.
	The inserted object has index=0.  Following objects have an incremented
	index.
@h

? insrt
@hsyn
  .insrt(@vari, @varobject)
@hdesc
 Insert an object before item @vari, and return the number of items in the list.
	The inserted object has index @vari, following items have an incremented
	index.

Not called @ainsert because that name is a keyword
@h

? remove
@hsyn
  .remove(@vari)
@hdesc 
Remove the object at index @vari. Following items have a decremented
	index. ie it's often most convenient to remove items from back
	to  front. Return the number of objects remaining in the list.
@h

? remove_all
@hsyn
.remove_all() 
@hdesc
Remove all the objects from the list. Return 0.
@h

? index
@hsyn
.index(@varobject)
@hdesc 
Return the index of the object in the list. Return a -1 if the
	object is not in the list.
@h

? count
@hsyn
  .count()
@hdesc
Return the number of objects in the list.
@h

? browser
@hsyn
.browser()
.browser("@vartitle", "@varstrname")
.browser("@vartitle", @varstrdef, "@varcommand")
@hdesc
@dl
@dt @{.browser(["@vartitle"], ["@varstrname"])@}
@dd Make the list visible on the screen.
	The items are normally the object names but if the second arg is
	present and is the name of a string symbol that is defined
	in the object's	template, then that string is displayed in the list.
@dt @{.browser("@vartitle", @varstrdef, "@varcommand")@}
@dd Browser labels are computed. For each item, command is executed
	with @{hoc_ac_ set@} to the index of the item. On return, the
	contents of @varstrdef are used as the label. Some objects
	notify the List when they change, ie point processes when they change
	their location notify the list.
@endl
@h

? selected
@hsyn
.selected()
@hdesc
 Return the index of the highlighted object or -1 if no object is highlighted.
@hsee
browser#List
@h

? select
@hsyn
.select(@vari)
@hdesc
Highlight the object at index @vari.
@hsee
browser#List
@h

? scroll_pos
@hsyn
index = list.scroll_pos()
list.scroll_pos(index)
@hdesc
Returns the index of the top of the browser window. Sets the scroll so that
index is the top of the browser window. A large number will cause a scroll
to the bottom.
@hsee
browser#List
@h

? select_action
@hsyn
list.select_action("@varcommand")
list.select_action("command", 0or1)
@hdesc
Execute a command when an item in the
list @abrowser#List is selected by single clicking the mouse.
@{hoc_ac_@} contains the index when the command is executed. Thus
@{l.select_action("action(hoc_ac_)")@} is convenient usage.
action will be invoked within the object context that existed when
@{select_action@} was called.

If the second arg exists and is 1 then the action is only called on
the mouse button release. If nothing is selected at that time then
then hoc_ac_ = -1
@hex
This example shows that the object context is saved when an action is
registered.
@execcode listsel
@code
begintemplate A
objref this, list, obj
proc init() {
	list = new List()
	list.append(this)
	for i=0,4 {
		obj = new Random()
		list.append(obj)
	}
	list.browser()
	list.select_action("act(hoc_ac_)")
}
proc act() {
	printf("item %d selected in list of object %s\n", $1, this)
}
endtemplate A

objref a[2]
for i=0,1 a[i] = new A()
@endcode
@h

? accept_action
@hsyn
list.accept_action("@varcommand")
@hdesc 
Execute a command when double clicking
on an item displayed in the list @abrowser#List by the mouse.
@{hoc_ac_@} contains the index when the command is executed. Command is
executed within the object context that existed when @{accept_action@}
was called.
@hex
@code
objref list, obj
list = new List()
for i=0,4 {
        obj = new Random()
        list.append(obj) 
	obj = new List()
	list.append(obj)
}
list.browser()
list.accept_action("act()")
proc act() {
        printf("item %d accepted\n", hoc_ac_)
}
@endcode
@h

? object
@hsyn
.object(@vari)
.o(@vari)
@hdesc 
Return the object at index @vari.
@h

? o
@hsyn
.object(@vari)
.o(@vari)
@hdesc 
Return the object at index @vari.
@h
