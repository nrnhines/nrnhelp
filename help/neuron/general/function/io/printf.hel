?1 IO
? hoc_stdio
@hsyn
hoc_stdout("filename")
hoc_stdout()
@hdesc
With a filename argument, switches the original standard out to filename.
With no arguments. switches current standard out back to original filename.

Only one level of switching allowed. Switching back to original causes
future output to append to the stdout. Switching to "filename" writes
stdout from the beginning of the file.
@hex
@code
proc p() {
	print "one" // to original standard out
        hoc_stdout("temp.tmp")
        print "two" // to temp.tmp
	forall psection() // to temp.tmp
        hoc_stdout()
        print "three" // to original standard out
}
p()
@endcode
@h

? printf

@hname
printf, fprint, sprint --- formatted output

@hsyn
@{printf(@varformat, @var...)@}
@{fprint(@varformat, @var...)@}
@{sprint(@varstring, @varformat, @var...)@}

@hdesc
@{Printf@} places output on the standard output.  @{Fprint@} places output
on the file opened with the @{wopen(@varfilename)@} command (standard
output if no file is opened).  @{Sprint@} places output in its @varstring
argument.  These functions are subsets of their counterparts in
the C standard library.

Each of these functions converts, formats, and prints its arguments after
the @varformat string under control of the @varformat string.

The @varformat string contains two types of objects: plain characters which
are simply printed, and conversion specifications
each of which causes conversion and printing of the next
successive argument.

Each conversion specification is introduced by the character `@{%@}'
and ends with a conversion type specifier.  The type specifiers
supported are:

@dl
@dt f
@dd signed value of the form -dddd.ddddd
@dt e
@dd signed value of the form -d.dddddde-nn
@dt g
@dd signed value in either `e' or `f' form based on given value 
and precision.  Trailing zeros and the decimal point are printed
only if necessary.
@dt d
@dd signed value truncated and printed as integer.
@dt o
@dd printed as unsigned octal integer.
@dt x
@dd printed as unsigned hexadecimal integer
@dt c
@dd number treated as ascii code and printed as single character
@dt s
@dd string is printed, arg must be a string.
@endl

Between @{%@} and the conversion type, optional flags, width, precision
and size specifiers can be placed.  The most useful flag is `-' which
left justifies the result, otherwise the number is right justified in its
field. Width and precision specifiers are of the form @{width.precis@}.

Special characters of note are:

@dl
@dt @{\n@}
@dd newline
@dt @{\t@}
@dd tab
@dt @{\r@}
@dd carriage return without the line feed
@endl

@{Printf@} and @{Fprint@} return the number of characters printed.

@hex
@code
printf("\tpi=%-20.10g sin(pi)=%f\n", PI, sin(PI))
        pi=3.141592654          sin(pi)=0.000000
        42
@endcode

@hsee
ropen

@hbug
Only a subset of the C standard library functions.

@h
