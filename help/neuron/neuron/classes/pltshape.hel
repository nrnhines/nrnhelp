?p neuron.exe neuron classes
?1 PlotShape
	Class for making a Shape window useful for coloring a shape
	according to a variable value and creating time and space graphs
	of a variable. The default variable is @varv. The first arg may be
	a SectionList.
? scale
@hsyn
   .scale(@varlow, @varhigh)
	sets blue and red values for the color scale and default axes for
	time and space plots
?   view
@hsee
view#Shape
@h
?   size
@hsee
size#Shape
@h
?   view_count
@hsee
view_count#Shape
@h
?   show
@hsee
show#Shape
@h
?   flush
@hsee
flush#Shape
@h
? fastflush
@hsyn
shapeplot.fastflush()
@hdesc
Speeds up drawing of @ahinton#PlotShape elements.
@h
?  variable
@hsyn
  .variable("@varrangevar")
	Range variable (@varv, @varm_hh, etc.) to be used for time, space, and
	shape plots.	
?   save_name
@hsee
save_name#Shape
@h
?   unmap
@hsee
unmap#Shape
@h
?   printfile
@hsee
printfile#Shape
@h
? menu_action
@hsee
menu_action#Graph
@h
? menu_tool
@hsee
menu_tool#Shape
@h
? observe
@hsee
observe#Shape
@h
? nearest
@hsee
nearest#Shape
@h
? push_selected
@hsee
push_selected#Shape
@h
? exec_menu
@hsee
exec_menu#Graph
@h
? erase
@hsee
erase#Graph
@h
? erase_all
@hdesc
Erases everything in the PlotShape, including all Sections and hinton plots
@hsee
erase_all#Graph observe#PlotShape hinton#PlotShape
@h
? beginline
@hsee
beginline#Graph
@h
? line
@hsee
line#Graph
@h
? mark
@hsee
mark#Graph
@h
? label
@hsee
label#Graph
@h
? color
@hsyn
section  shape.color(@vari)
@hdesc
	colors the currently accessed section according to color index
	(index same as specified in Graph class). If there are several
	sections to color it is more efficient to make a SectionList and
	use @{.color_list@}
@h

? color_all
@hsyn
   .color_all(@vari)
@hdesc
	colors all the sections
@h

? color_list
@hsyn
   .color_list(@varSectionList, @vari)
@hdesc
	colors the sections in the list
@h

? colormap
@hsyn
s.colormap(size, [global = 0])
s.colormap(index, red, green, blue)
@hdesc
If the optional global argument is 1 then these functions refer to
the global (default) Colormap and a change will affect all PlotShape instances
that use it. Otherwise these function create a colormap that is local to
this PlotShape.

With a single argument, destroys the old and creates a new colormap
for shape plots with space for size colors. All colors are initialized to
gray.

The four argument syntax, specifies the color of the index element of the
colormap. the red, green, and blue must be integers within the range 0-255
and specify the intensity of these colors.

If an existing colormap is displayed in the view, it will be redrawn with
the proper colors when @ascale#PlotShape is called.
@h

? hinton
@hsyn
s.hinton(&varname, x, y, size)
s.hinton(&varname, x, y, xsize, ysize)
@hdesc
A filled square or rectangle is drawn with center at (x, y) and edge length given by
size. The color depends on the @acolormap#PlotShape and @ascale#PlotShape
and is redrawn on @aflush#PlotShape .

If there are many of these elements then @afastflush#PlotShape can
speed plotting by up to a factor of 4 if not too many elements change
color between fastflush calls.
@hex
@execcode hinton
@code
create soma
access soma
objref sl
sl = new SectionList()
objref s
s = new PlotShape(sl)
s.colormap(3)
s.colormap(0, 255, 0, 0)
s.colormap(1, 255, 255, 0)
s.colormap(2, 200, 200, 200)
s.scale(0, 2)
objref vec
nx = 30
ny = 30
vec = new Vector(nx*ny)
vec.fill(0)
for i=0,nx-1 for j=0,ny-1 {
	s.hinton(&vec.x[i*ny + j], i/nx, j/ny, 1/nx)
}
s.size(-.5, 1, 0, 1)
s.exec_menu("Shape Plot")

objref r
r = new Random()
r.poisson(.01)

doNotify()

proc p() {local i
	for i=1,1000 {
		vec.setrand(r)
		s.fastflush() // faster by up to a factor of 4
//		s.flush()
		doNotify()
	}
}
{startsw() p() print stopsw() }
@endcode
@h

? len_scale
@hsyn
section shape.len_scale(scl)
@hdesc
See @alen_scale#Shape
@h

? rotate
@hsyn
shape.rotate()
shape.rotate(xorg, yorg, zorg, xrad, yrad, zrad)
@hdesc
See @arotate#Shape
@h


