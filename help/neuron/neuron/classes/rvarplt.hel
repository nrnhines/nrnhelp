?p neuron.exe neuron classes

?1 RangeVarPlot
@hsyn
RangeVarPlot("@varrangevar")
RangeVarPlot("expression involving $1")
@hdesc
	Class for making a space plot. eg. voltage as function of path between
	two points on a cell.  For plotting, an object of this type needs
	to be inserted in a Graph with
		@{g.addobject(rvp)@}
	By default, the location of the path nearest the root is location 0
	(the origin) of the space plot.

	If the @varrangevar does not exist at certain places in the path it
	is assumed to have a value of 0.

	The first form where @varrangevar is "@varv" or "@varm_hh", etc. is very
	efficient since the object can store pointers to the variables
	for fast plotting.

	The second form is much slower since the expression
	must be executed by the interpreter for each point along the path
	for each plot.  Execution of the expression is equivalent to
	@{forsec seclist@} for (@varx) f(@varx)
	where the expression is the body of f. (Hence the use of $1 to
	denote the arc length position of the (temporary
	currently accessed section.) 
@hsee
distance#Geometry
@hex
An example is plotting the
	transfer impedance ratio with
@code
objectvar imp, rvp, g
imp = new Impedance()
rvp = new RangeVarPlot("imp.amp($1)/imp0()")
rvp... //specify range begin and end
imp... //specify impedance computation
g = new Graph()
g.addobject(@varrvp)
@endcode
@h

? begin
@hsyn
   .begin(@varx)
@hdesc
	x position of the currently accessed section that starts the
	path used for the space plot.
@h

? end
@hsyn
   .end(@varx)
@hdesc
	x position of the currently accessed section that ends the
	path used for the space plot.
@h

? origin
@hsyn
   .origin(@varx)
@hdesc
	x position of the currently accessed section that is treated
	as the origin (location 0) of the space plot. The default is usually
	suitable unless you want to have several rangvarplots in one graph
	in which case this function is used to arrange all the plots relative
	to each other.
@h

? left
@hsyn
   .left()
@hdesc
	returns the coordinate of the beginning of the path.
@h

? right
@hsyn
   .right()
@hdesc
	returns the coordinate of the end of the path. The total length
	of the path is right() - left().
@h

? list
@hsyn
   .list(@varsectionlist)
@hdesc
	append the path of sections to the @aSectionList object argument.

@h
? color
@hsyn
	.color(index)
@hdesc
Change the color property. To see the change on an already plotted
RangeVarPlot in a Graph, the Graph should be @aflush#Graph ed.
@h

? to_vector
@hsyn
rvp.to_vector(yvec)
rvp.to_vector(yvec, xvec)
@hdesc
Copy the range variable values to the @aVector yvec. yvec is resized
to the number of range points. If the second arg is present then
the locations are copied to xvec. A plot of @{yvec.line(g, xvec)@} would
be identical to a plot using @{g.addobject(rvp)@}.
@hsee
addobject#Graph
@h

? from_vector
@hsyn
rvp.from_vector(yvec)
@hdesc
Copy the values in yvec to the range variables along the rvp path.
The size of the vector must be consistent with rvp.
@h

