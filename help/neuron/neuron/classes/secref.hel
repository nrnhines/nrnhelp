?1 SectionRef
@hsyn
@varsection sref = new SectionRef()
@hdesc
SectionRef keeps a pointer/reference to a section
	The reference is to the currently accessed section at the
	time the object was created.

	This class allows sections to be referenced as normal object variables
	for assignment and passing as arguments.
@h
? sec
@hsyn
sref.sec	
@hdesc
special syntax that makes the reference the currently
		accessed section.
	This class allows sections to be referenced as normal object variables
	for assignment and passing as arguments. The usage is
@execcode secref
@code
create soma, axon
axon.diam=2
soma.diam=10
access axon
objref s1, s2
soma s1 = new SectionRef()	// s1 holds a reference to the soma
print s1.sec.diam		// print the diameter of the soma
s2 = s1				// s2 also holds a reference to the soma
s2.sec { psection() }		// print all info about soma
axon s2 = new SectionRef()
proc c() {
	$o1.sec connect $o2.sec(0), 1
}
c(s1, s2)
topology()
@endcode
This last is a procedure that takes two SectionRef args and
connects them end to end.
@h
? parent
@hsyn
sref.parent
@hdesc
parent of sref.sec becomes the currently accessed section. Generally it
is used in a context like @{sref.parent { statement }@} just like a
normal section name and does NOT need a section_pop
If there is a chance that a section does not have a parent then
@ahas_parent#SectionRef should be called first to avoid an execution error.
Note that the parent is the current parent of sref.sec, not necessarily
the parent when the SectionRef was created.
@h
? trueparent
@hsyn
sref.trueparent
@hdesc
trueparent of sref.sec becomes the currently accessed section.
This is normally identical to @aparent#SectionRef except when the
parent's @aparent_connection is equal to the parent's
@asection_orientation .
If there is a chance that a section does not have a trueparent then
@ahas_trueparent#SectionRef should be called first to avoid an execution error.
@h
? child
@hsyn
sref.child[i]
@hdesc
the ith child of sref.sec becomes the currently accessed section.
Generally it
is used in a context like
@code
for i=0, sref.nchild-1 sref.child[i] { statement }
@endcode
Note that the children are the current children of sref.sec, not necessarily
the same as when the SectionRef was created since sections may be
deleted or re-connected subsequent to the instantiation of the SectionRef.
@h
? root
@hsyn
sref.root
@hdesc
root of sref.sec becomes the currently accessed section.
@h
? has_parent
@hsyn
boolean = sref.has_parent
@hdesc
returns 1 if sref.sec has a parent and 0 if sref.sec is a root section.
Invoking sref.parent when sref.sec is a root section will print an
error message and halt execution.
@h
? has_trueparent
@hsyn
boolean = sref.has_trueparent
@hdesc
returns 1 if the sref.sec parent node is not the root node and 0 otherwise.
Invoking sref.trueparent when it is the root node will print an
error message and halt execution.
@h
? nchild
@hsyn
integer = sref.nchild
@hdesc
Return the number of child sections connected to sref.sec
@h

? is_cas
@hsyn
boolean = sref.is_cas()
@hdesc
Returns 1 if this section reference is the currently accessed section, 0 otherwise.
@h

? exists
@hsyn
boolean = sref.exists()
@hdesc
Returns 1 if the section has not been deleted, 0 otherwise.
@hsee
delete_section#topology  section_exists#topology
@h


