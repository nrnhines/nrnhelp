?p neuron.exe neuron 

?0 functions
These are Neuron-specific functions which you can call from 
the nrnoc interpreter.

? batch_run
@hsyn
batch_run(tstop, tstep, "@varfilename")
batch_run(tstop, tstep, "@varfilename", "comment")
@hdesc
This command replaces the set of commands:
@code
while (t < tstop) {
        for i=0, tstep/dt {
                fadvance()
        }
        // print results to filename
}
@endcode
and produces the most efficient run on any given neuron model.  This
command was created specifically for Cray computers in order eliminate
the interpreter overhead as the rate limiting simulation step.

This command will save selected variables, as they are changed in the run, 
into a file whose name is given as the third argument.
The 4th comment argument is placed at the beginning of the file.
The @abatch_save command specifies which variable are to be saved.

@h

	
? batch_save
@hsyn
batch_save()
batch_save(&@varvar, &@varvar, ...)
@hdesc
@dl
@dt @{batch_save()@}
@dd starts a new list of variables to save in a @abatch_run .
@dt @{batch_save(&@varvar, &@varvar, ...)@}
@dd adds pointers to the list of variables to be saved in a @{batch_run@}.
	A pointer to a range variable, eg. "v", must have an explicit
	arc length, eg. axon.v(.5).
@endl

@hex
@code
batch_save()	//This clears whatever list existed and starts a new
		//list of variables to be saved.
batch_save(&soma.v(.5), &axon.v(1))
for i=0,2 {
	batch_save(&dend[i].v(.3))
}
@endcode
specifies five quantities to be saved from each @{batch_run@}.
@h

? initnrn
@hsyn
initnrn()
@hdesc
	Initialize @{t, dt, clamp_resist@}, and @{celsius@} to the values
	they had when the program was first run. 

	Note that in this
	version @{Ra@} is no longer a global variable but a section variable
	like @varL and @varrallbranch. Thus @{Ra@} can be different for different
	sections.  In order to set @{Ra@} to a constant value, use:

		@{forall Ra=...@}
@hbug
Not very useful. No way to completely restart neuron exect to @aquit and
re-load.
@h
? fadvance
@hsyn
 fadvance()
@hdesc
	Integrate all section equations over the interval @adt .
	The value of @at is incremented by dt.
The default method is first order implicit but may be changed to
Crank-Nicholson by changing @asecondorder = 2.

fadvance integrates the equation over the dt step by
calling all the BREAKPOINT blocks of models at t+dt/2 twice with
v+.001 and v in order to compute the current and conductance to form
the matrix conductance*voltage = current.
This matrix is then solved for v(t+dt).
(if secondorder == 2 the ionic currents are adjusted to be second order
correct. If secondorder == 1 the ionic currents are not adjusted but
the voltages are second order correct)
Lastly the SOLVE statement within the BREAKPOINT block of models is
executed with t+dt and the new values of v in order to integrate those
states (from new t-.5dt to new t+.5dt).
@h

? finitialize
@hsyn
finitialize()
finitialize(@varv)
@hdesc
	Call the INITIAL block for all mechanisms and point processes
	inserted in the sections.
	If the optional argument is present then all voltages of all sections
	are initialized to @varv.
	@{t@} is set to 0.
	
The order of principal actions during an finitialize call is;
@code
t = 0
Clear the event queue.
Random.play values assigned to variables.
Make sure internal structures needed by integration methods are consistent
  with the current biophysical spec.
Vector.play at t=0 values assigned to variables.
All v = arg if the arg is present.
Type 0 FInitializeHandler statements executed.
All mechanism BEFORE INITIAL blocks are called.
All mechanism INITIAL blocks called.
   Mechanisms that WRITE concentrations are after ion mechanisms and
   before mechanisms that READ concentrations.
LinearMechanism states are initialized
INITIAL blocks inside NETRECEIVE blocks are called.
All mechanism AFTER INITIAL blocks are called.
Type 1 FInitializeHandler statements executed.
The INITIAL block net_send(0, flag) events are delivered.
Effectively a call to CVode.re_init or fcurrent(), whichever appropriate.
Various record functions at t=0. e.g. CVode.record, Vector.record 
Type 2 FInitializeHandler statements executed.

@endcode
@hsee
FInitializeHandler Init#RunControl re_init#CVode fcurrent frecord_init
@h

? frecord_init
@hsyn
frecord_init()
@hdesc
Initializes the Vectors which are recording variables. i.e. resize to 0 and
append the current values of the variables.  This is done at the end
of an @afinitialize call but needs to be done again to complete initialization
if the user changes states or assigned variables that are being recorded..
@hsee
record#Vector Init#RunControl#StandardRunTools
@h

? fstim
@hsyn
 fstim()
@hdesc 
Consider this obsolete.  Nevertheless, it does work. See the old NEURON reference
	manual.
@h

? fstimi
@hsyn
 fstimi()
@hdesc 
Obsolete
@h

? fit_praxis
@hsyn
min = fit_praxis(@varn, "@varfunname", &@varx[0])
min = fit_praxis(@varn, "@varfunname", @varVector)
@hdesc
	This is the principal axis method for minimizing a function. See praxis.c
	in the scopmath library.

@dl
@dt @{1 <= n < 20@}
@dd is the number of parameters to vary (number
	of arguments to @varfunname). 
@dt @varfunname
@dd the name of the function to minimize, eg. least square difference between model and data.
The funname must take two arguments, the first arg, @{$1@},
is the number of elements in second arg vector, @{$&2@}. The ith index of the
vector is given by @{$&2[i]@}.
@dt @varx 
@dd is a double vector of at least length @varn. Prior to the call set
	it to a guess of the parameter values. On return it contains the
	values of the args that minimize @{funname()@}. 
@endl

@varfunname may be either
	an interpreted hoc function or a compiled NMODL function.

If the variable stoprun is set to 1 during a call to fit_praxis, it will
return immediately (when the current call to  funname returns) with
a return value and varx values set to the best minimum found so far.
@hbug
Up to version 4.0.1, the arguments to @varfunname were an explicit
list of @varn arguments. ie @{numarg()==n@}.
@h

? attr_praxis
@hsyn
 attr_praxis(@vartolerance, @varmaxstepsize, @varprintmode)
@hdesc
	Set the attributes of the praxis method. This must be called before
	the first call to @afit_praxis .
@dl
@dt tolerance
@dd praxis attempt to return f(x) such that if x0 is the true
		local minimum then @{norm(@varx-@varx0) < tolerance@}
@dt maxstepsize
@dd should be set to about the maximum distance from
		initial guess to the minimum.
@dt printmode=0	
@dd		no printing
@dt printmode=1,2,3
@dd	more and more verbose
@endl
@h

? pval_praxis
@hsyn
pval = pval_praxis(@vari)
pval = pval_praxis(@vari, &@varpaxis[0])
pval = pval_praxis(@vari, @varVector)
@hdesc
	Return the ith principal value. If the second argument is present, @{pval_praxis@} also fills
	the vector with the ith principal axis.
@h

? stop_praxis
@hsyn
stop_praxis()
stop_praxis(i)
@hdesc
Set a flag in the praxis function that will cause it to stop after
        it finishes the current (or ith subsequent)
	 principal axis calculation. If this function  
        is called before @{fit_praxis@}, then praxis will do a single 
	(or i) principal axis calculation and then exit. 
@h

? fclamp
@hsyn
 fclamp()
@hdesc
 obsolete. Use the @aVClamp or @aSEClamp point process.
@h

? fclampi
@hsyn
 fclampi()
@hdesc
 obsolete. Use the @aVClamp or @aSEClamp point process.
@h

? fclampv
@hsyn
fclampv()
@hdesc
 obsolete. Use the @aVClamp or @aSEClamp point process.
@h

? prstim
@hsyn
 prstim()
@hdesc
 obsolete. Print the info about @{fstim@}, @{fclamp@}, and @{fsyn@}
@h

? fcurrent
@hsyn
 fcurrent()
@hdesc
	Make all assigned variables (currents, conductances, etc)
	consistent with the values of the states. Useful in combination
	with @afinitialize .
@hex
@execcode fcurrent
@code
create soma
access soma
insert hh
print "default el_hh = ", el_hh
// set el_hh so that the steady state is exactly -70 mV
finitialize(-70) // sets v to -70 and m,h,n to corresponding steady state values

fcurrent()	// set all assigned variables consistent with states

// use current balance: 0 = ina + ik + gl_hh*(v - el_hh)		
el_hh = (ina + ik + gl_hh*v)/gl_hh

print "-70 mV steady state el_hh = ", el_hh
fcurrent()	// recalculate currents (il_hh)
@endcode
@h

? fmatrix
@hsyn
 fmatrix()
@hdesc
	Print the jacobian matrix for the tree structure in a particularly
	confusing way. for debugging only.
@h

? issection
@hsyn
 issection("@varregular @varexpression")
@hdesc
	Return 1 if the currently accessed section matches the regular expression.  
	Return 0 if otherwise.

	Regular expressions are like those of grep except {} are used
	in place of [] to avoid conflict with indexed sections. Thus
	a[{8-15}] matches sections a[8] through a[15].
	A match always begins from the beginning of a section name. If you
	don't want to require a match at the beginning use the dot. 

	(Note,
	that @{.@} matches any character and @{*@} matches 0 or more occurrences
	of the previous character). The interpreter always closes each string with
	an implicit @{$@} to require a match at the end of the string. If you
	don't require a match at the end use "@{.*@}".
@hex
@code
create soma, axon, dendrite[3]
forall if (issection("s.*")) {
	print secname()
}
@endcode
will print @{soma@}
@code
forall if (issection("d.*2]")) {
	print secname()
}
@endcode
will print @{dendrite[2]@}
@code
forall if (issection(".*a.*")) {
	print secname()
}
@endcode
will print all names which contain the letter "a"
@code
soma
axon
@endcode
@hsee
ifsec forsec
@h

? ismembrane
@hsyn
 ismembrane("@varmechanism")
@hdesc
	This function returns a 1 if the current membrane contains this
	(density) mechanism.  This is not for point
	processes. 

@hex
@code
forall if (ismembrane("hh") && ismembrane("ca_ion")) {
	print secname()
}
@endcode
will print the names of all the sections which contain both Hodgkin-Huxley and Calcium ions.
@h

? sectionname
@hsyn
 sectionname(@varstrvar)
@hdesc
	The name of the currently accessed section is placed in @varstrvar.

This function is superseded by the easier to use, @asecname#functions .
@h

? secname
@hsyn
 secname()
@hdesc
	Returns the currently accessed section name. Usage is
@code
		strdef s
		s = secname()
@endcode
	or
@code
		print secname()
@endcode
	or
@code
		forall for(x) printf("%s(%g)\n", secname(), x)
@endcode
@h

? psection
@hsyn
 psection()
@hdesc
	Print info about currently accessed section in a format which is executable.
 (length, parent, diameter, membrane information)

@h

?p neuron.exe neuron globals

? secondorder
@hsyn
secondorder
@hdesc
	This is a global variable which specifies the time integration method.
@dl
@dt =0 
@dd default fully implicit backward euler. Very numerically stable.
	gives steady state in one step when @{@vardt=1e10@}. Numerical errors
	are proportional to @vardt.
@dt =1 
@dd crank-nicholson Can give large (but damped) numerical error
	oscillations. For small @{dt@} the numerical errors are proportional
	to @{dt^2@}. Cannot be used with voltage clamps. Ionic currents
	are first order correct. Channel conductances are second order
	correct when plotted at @{t+dt/2@}
@dt =2 
@dd crank-nicholson like 1 but in addition Ion currents (@varina, @varik,
	etc) are fixed up so that they are second order correct when
	plotted at @{t-dt/2@}
@endl
@h

? t
@hsyn
t
@hdesc
	The global time variable.
@h

? dt
@hsyn
dt
@hdesc
	The integration interval for @afadvance ().

When using the default implicit integration method ( @asecondorder = 0)
there is no upper limit on dt for numerical stability and in fact for
passive models it is often convenient to use dt=1.9 to obtain the
steady state in a single time step.

dt can be changed by the user at any time during a simulation. However,
some inserted mechanisms may use tables which depend on the value of dt
which will be automatically recomputed. In this situation, the tables
are not useful and should be bypassed by setting the appropriate
usetable_suffix global variables to 0.
@h

? clamp_resist
@hsyn
clamp_resist
@hdesc
	Obsolete, used by fclamp.
@h

? celsius
@hsyn
celsius = 6.3
@hdesc
Temperature in degrees centigrade.

Generally, rate function tables ( eg. used by the hh mechanism)
depend on temperature and will automatically be re-computed
whenever celsius changes.
@h

? stoprun
@hsyn
stoprun
@hdesc
A flag which is watched by @afit_praxis , @aCVode , and other procedures
during a run or family of runs.
When stoprun==1 they will immediately return without completing
normally. This allows safe stopping in the middle of a long run. Procedures
that do multiple runs should check stoprun after each run and exit
gracefully. The @aStop#RunControl of the RunControl GUI sets this variable.
It is cleared at the beginning of a run or when continuing a run.
@h

?p neuron.exe neuron functions

? this_section
@hsyn
this_section(@varx)
@hdesc
	Return a pointer (coded as a double) to the section which contains location 0 of the
	currently accessed section. This pointer can be used as the argument
	to @apush_section . Functions that return pointers coded as doubles
are unsafe with 64 bit pointers. This function has been superseded by
@aSectionRef . See @asec#SectionRef .
@h

? this_node
@hsyn
this_node(@varx)
@hdesc
Return a pointer (coded as a double) to the segment
of the currently accessed section that
contains location @varx. If you wish to compute a segment number
index where 1 is the first nonzero area segment and nseg is the last
nonzero area segment
of the currently accessed section corresponding to position x use the
hoc function
@code
func segnum() {
        if ($1 <= 0) {
                return 0
        }else if ($1 >= 1) {
                return nseg+1
        }else {
                return int($1*nseg + .5)
        }
}
@endcode
@hbug
This function is useless and should be removed.
@h

? parent_section
@hsyn
parent_section(@varx)
@hdesc
	Return the pointer to the section parent of the segment containing @varx.
	Because a 64 bit pointer cannot safely be represented as a
double this function is deprecated in favor of @aparent#SectionRef .
@h

? parent_node
@hsyn
parent_node(@varx)
@hdesc
	Return the pointer of the parent of the segment containing @varx.
@hbug
This function is useless and currently returns an error.
@h

? parent_connection
@hsyn
@vary = parent_connection()
@hdesc
        Return location on parent that currently accessed section is
        connected to. (0 <= x <= 1). This is the value, y, used in
@code
        connect child(x), parent(y)
@endcode
@h

? section_orientation
@hsyn
@vary = section_orientation()
@hdesc
        Return the end (0 or 1) which connects to the parent. This is the
value, x, used in

@code
        connect child(x), parent(y)
@endcode
@h

?p neuron.exe neuron

?1 CompileTimeOptions
The following definitions are found in nrnoc/SRC/options.h and add extra
functionality which not everyone may need. The extras come at the cost
of larger memory requirements for node and section structures. METHOD3 is too large
and obscure to benefit most users.
@code
#define VECTORIZE	1	/* hope this speeds up simulations on a Cray */
				/* this is no longer optional */

#define EXTRACELLULAR	1	/* extracellular membrane mechanism */

#define DIAMLIST	1	/* section contains diameter info */
				/* shape plots make use of this */

#define EXTRAEQN	0	/* ionic concentrations calculated via
				 * jacobian along with v (not implemented) */
#if DIAMLIST
#define NTS_SPINE	1	/* A negative diameter in pt3dadd() tags that
				 * diamlist location as having a spine.
				 * diam3d() still returns the positive diameter
				 * spined3d() returns 1 or 0 signifying presence
				 * of spine. setSpineArea() tells how much
				 * area/spine to add to the segment. */
#endif

#define METHOD3		1	/* third order spatially correct method */
				/* testing only, not completely implemented */
				/* not working at this time */

#if METHOD3
 spatial_method(i)
	no arg, returns current method
	i=0 The standard NEURON method with zero area nodes at the ends
		of sections.
	i=1 conventional method with 1/2 area end nodes
	i=2 modified second order method
	i=3 third order correct spatial method
	Note: i=1-3 don't work under all circumstances. They have been
	insufficiently tested and the correctness must be established for
	each simulation.
#endif

#if NEMO
neuron2nemo("filename") Beginning of translator between John Millers
		nemosys program	and NEURON. Probably out of date.
nemo2neuron("filename")
#endif
@endcode
@h


?p neuron.exe neuron
?1 ion
? ion_style
@hsyn
oldstyle = ion_style("@varname_ion", @varc_style, @vare_style, @vareinit, @vareadvance, @varcinit)
oldstyle = ion_style("@varname_ion")
@hdesc	
In the currently accessed section,
	force the named ion (eg. na_ion, k_ion, ca_ion, etc) to handle
	reversal potential and concentrations according to the indicated
	styles.
	You will not often need this function since the
	style chosen automatically on a per section basis should be
	appropriate to the set of mechanisms inserted in each section.
	
Warning: if other mechanisms are inserted subsequent to a call
	of this function, the style will be "promoted" according to
	the rules associated with adding the used ions to the style
	previously in effect.

The oldstyle value is previous internal setting of
c_style + 4*cinit +  8*e_style + 32*einit + 64*eadvance.

@dl
@dt c_style: 0, 1, 2, 3.
@dd Concentrations respectively treated as UNUSED,
PARAMETER, ASSIGNED, or STATE variables.  Determines which panel (if
any) will show the concentrations. 
@dt e_style: 0, 1, 2, 3.
@dd Reversal potential respectively treated as
UNUSED, PARAMETER, ASSIGNED, or STATE variable.
@dt einit: 0 or 1.
@dd If 1 then reversal potential computed by Nernst equation
on call to @{finitialize()@} using values of concentrations.
@dt eadvance: 0 or 1.
@dd If 1 then reversal potential computed every call to
@{fadvance()@} using the values of the concentrations.
@dt cinit: 0 or 1.
@dd If 1 then a call to finitialize() sets the concentrations
to the values of the global initial concentrations. eg. @{nai@} set to
@{nai0_na_ion@} and @{nao@} set to @{nao0_na_ion@}.
@endl

The automatic style is chosen based on how the set of mechanisms that
have been inserted in a section use the ion. Note that the precedence is
WRITE > READ > unused in the USEION statement; so if one mechanism
READ's  cai/cao and another mechanism WRITE's them then WRITE takes precedence
in the following table. For compactness, the table assumes the ca ion.
Each table entry identifies the equivalent parameters to the ion_style
function.
@table
cai/cao	->	unused		read		write

eca unused	0,0,0,0,0	1,0,0,0,0	3,0,0,0,1

eca read	0,1,0,0,0	1,2,1,0,0	3,2,1,1,1

eca write	0,2,0,0,0	1,2,0,0,0	3,2,0,0,1
@endtable
For example suppose one has inserted a mechanism that READ's eca,
a mechanism that READ's cai, cao and a mechanism that WRITE's cai, cao
Then, since WRITE takes precedence over READ in the above table,
@{cai/cao@} would appear in the STATE variable panel (first arg is 3),
@{eca@} would appear in the ASSIGNED variable panel (second arg is 2),
@{eca@} would be calculated on a call to finitialize (third arg is 1),
@{eca@} would be calculated on every call to fadvance (fourth arg is 1),
@{cai/cao@} would be initialized (on finitialize) to the global variables
@{cai0_ca_ion@} and @{cao0_ca_ion@} respectively. (note that this takes place just
before the calculation of @{eca@}).
@h

? ghk
@hsyn
 ghk(@varv, @varci, @varco, @varcharge)
@hdesc
Return the Goldman-Hodgkin-Katz current (normalized to unit permeability).
Use the present value of celsius.
@code
mA/cm2 = (permeability in cm/s)*ghk(mV, mM, mM, valence)
@endcode
@h

? nernst
@hsyn
nernst(@varci, @varco, @varcharge)
nernst("@varena" or "@varnai" or "@varnao", [@varx])
@hdesc
@dl
@dt @{nernst(@varci, @varco, @varcharge)@}
@dd returns nernst potential. Utilizes the present value of celsius.
@dt @{nernst("@varena" or "@varnai" or "@varnao", [@varx])@}
@dd calculates @{@varnao/@varnai = exp(z*@varena/RTF)@} for the ionic variable 
named in the string.
@endl
Celsius, valence, and the other two ionic variables are taken from their
values at the currently accessed section at position x (.5 default).
A hoc error is printed if the ionic species does not exist at this location.
@h

? ion_register
@hsyn
type = ion_register("name", charge)
@hdesc
Create a new ion type with mechanism name, "name_ion", and associated
variables: iname, nameo, namei, ename.
If any of these names already
exists and name_ion is not already an ion, the function returns -1,
otherwise it returns the mechanism type index. If name_ion is already
an ion the charge is ignored but the type index is returned.
@h

? ion_charge
@hsyn
charge = ion_charge("name_ion")
@hdesc
Return the charge for the indicated ion mechanism. An error message is
printed if name_ion is not an ion mechanism.
@h
